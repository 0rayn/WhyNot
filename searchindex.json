[{"content":"I - What\u0026rsquo;s the TL-MR3020? The TL-MR3020 is a small, portable wireless router made by TP-Link. Originally designed to share a 3G/4G USB modem connection over Wi-Fi, but we want more right ? It‚Äôs based on the Atheros AR9331 SoC, which includes: A 400 MHz MIPS processor 4 MB flash, 32 MB RAM USB 2.0 host support Despite its limited specs, the TL-MR3020 is incredibly capable with the right tweaks ‚Äî and that‚Äôs what this post is all about. II - What\u0026rsquo;s openWrt: OpenWrt is a lightweight Linux distribution designed specifically for embedded devices like routers. Unlike the stock firmware that comes preinstalled on most routers, OpenWrt gives you full control over your device ‚Äî with a package manager, writable filesystem, and the ability to run your own software.\nIII - Why Hack This Router? First and foremost ‚Äî why not? But on a serious note, hacking the TL-MR3020 breathes new life into an old piece of hardware and unlocks its full potential. Once you‚Äôve got OpenWrt running and serial access set up, you\u0026rsquo;re no longer limited by the stock firmware. On the contrary, you‚Äôll be encouraged to innovate and experiment with your own ideas, services, and projects. IV - Building a Custom OpenWrt Image As mentioned earlier, OpenWrt is a Linux distribution tailored for embedded devices. The latest supported version for the TL-MR3020 v1 is 17.01.7 (check hardware support).\nBy default, the official OpenWrt image comes with LuCI, the web interface ‚Äî but it consumes a significant amount of the router\u0026rsquo;s already limited memory.\n\u0026lt;|\u0026gt; TL-MR3020 With the official openWrt image: Out of the box, the router has only ~140 KB of free space left ‚Äî not enough to install the packages needed for EXT4 or USB storage support.\n\u0026lt;|\u0026gt; TL-MR3020 With our Custom Image: With a custom OpenWrt image, we can mount an external flash drive (e.g., a 64 GB USB) and use it as the main storage for packages and configuration files. This unlocks a ton of possibilities.\n\u0026lt;|\u0026gt; Download The image Builder: openWrt provide an image builder for you to make a custom image with your specific needs in mind (Download)\n\u0026lt;|\u0026gt; Build the image: Install any necessary dependencies on your system, then run:\nmake image PROFILE=tl-mr3020-v1 PACKAGES=\u0026#34;kmod-usb-core kmod-usb2 kmod-usb-storage kmod-fs-ext4 block-mount kmod-usb-storage-extras libblkid libuuid\u0026#34; Once the build finishes, the output will be located under:\nbin/targets/ar71xx/generic V - Flashing the OpenWrt Firmware \u0026lt;|\u0026gt; First-Time Flash: If this is your first time installing OpenWrt on the TL-MR3020, follow these steps:\nDownload the correct firmware\nUse the factory image:\nlede-17.01.7-ar71xx-generic-tl-mr3020-v1-squashfs-factory.bin\nConnect to the router\nPower on the router and connect to its default Wi-Fi network.\nOn the back of the router, you‚Äôll find details such as:\nDefault SSID Default IP (usually 192.168.0.1 or 192.168.1.1) Default username/password Access the web interface\nOpen a browser and go to the default IP address.\nLogin using the default credentials (often admin / admin or blank password).\nFlash the firmware\nNavigate to:\nSystem Tools \u0026gt; Firmware Upgrade\nUpload the .bin file you downloaded earlier.\nWait for the router to flash and reboot\nOnce the process finishes, the router will reboot into OpenWrt.\nNext Step: Connect via SSH\nAfter flashing, you\u0026rsquo;ll want to connect to your router via SSH.\n‚Üí See the Connecting to the Router via SSH section.\n\u0026lt;|\u0026gt; Updating to a New Version: If OpenWrt is already installed on your TL-MR3020:\nDownload the sysupgrade image\nGet this file:\nlede-17.01.7-ar71xx-generic-tl-mr3020-v1-squashfs-sysupgrade.bin\nConnect to the router\nSee How to Connect to the Router.\nHost the firmware on your PC\nInside the output folder on your host machine:\npython3 -m http.server 8000 Download the firmware to the router On the router (via SSH), run:\nwget http://\u0026lt;PC_IP\u0026gt;:8000/lede-17.01.7-ar71xx-generic-tl-mr3020-v1-squashfs-sysupgrade.bin -O /tmp/sysupgrade.bin (don\u0026rsquo;t forget to change \u0026lt;PC_IP\u0026gt; to your host computer IP)\nVerify the Download Check that the file size on the router matches the file on your PC.\nRun The Upgrade\nsysupgrade -n /tmp/sysupgrade.bin VI - Connecting to the Router via SSH Connect your router to your computer using an Ethernet cable. SSH into the router using: ssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.1.1 The router is usually configured to use 192.168.1.1 as its LAN interface IP. We force the use of RSA because the firmware is old and newer SSH clients may disable RSA by default. Voila! You\u0026rsquo;re in. You can now set an admin password or configure the system however you like. /// By now you may think you have everything you need to start all the awesome ideas you have in mind\u0026hellip; But:\nSo, let\u0026rsquo;s make that USB drive work for us!\nVII - Preparing a USB Drive Connect your USB drive to your computer.\nImportant: Before formatting, identify the correct device name for your USB drive to avoid data loss. Run:\nlsblk Look for your USB drive‚Äôs size and device path (e.g., /dev/sda1). Format the USB drive to use the EXT4 filesystem with:\nsudo mkfs.ext4 -O ^has_journal -m 0 -L \u0026lt;LABEL_NAME\u0026gt; /dev/sdX1 Replace /dev/sdX1 with the actual device name of your USB partition. Explanation of options:\n-O ^has_journal: disables journaling to reduce write wear and improve speed (less resilience to crashes). -m 0: reserves 0% space for root (normally 5% is reserved on Linux root disks, but not needed here). -L \u0026lt;LABEL_NAME\u0026gt;: sets a label name for the partition (replace \u0026lt;LABEL_NAME\u0026gt; with your desired label). VIII - Mounting the USB Drive on the Router Plug the USB drive into the router. check if the device is recognized: ls /dev/sda* You should see something like /dev/sda1. Create a mount point: mkdir /mnt/usb Mount the USB drive: mount /dev/sda1 /mnt/usb Navigate to the mounted directory: cd /mnt/usb Voila! You can now read from and write to your USB drive. IX - Making the USB the New Overlay (Storage Expansion via OverlayFS) By default, the router has only a few kilobytes of writable space. Let‚Äôs fix that by using a USB drive as the new overlay storage.\nEdit the fstab configuration: Open the file /etc/config/fstab and add the following: config mount option target \u0026#39;/overlay\u0026#39; option uuid \u0026#39;XXXXXXXXXX\u0026#39; # use block info to get your usb uuid option fstype \u0026#39;ext4\u0026#39; option options \u0026#39;noatime,nodiratime,data=writeback,barrier=0,commit=60\u0026#39; option enabled \u0026#39;1\u0026#39; option enabled_fsck \u0026#39;1\u0026#39; Get your USB‚Äôs UUID by running: block info Copy the current overlay to the USB: mount /dev/sda1 /mnt mount_root cd /overlay tar -cf - . | tar -C /mnt -xvf - umount /mnt This command tars the current overlay contents and extracts them onto the USB drive. ‚úÖ After reboot, OpenWrt will mount the USB as your overlay partition ‚Äî giving you way more room for packages and configuration! If something doesn\u0026rsquo;t work, try using:\ndmesg this shows the kernel debug messages \u0026ndash; useful for debugging USB or mount issues.\n(Optional) Adding Swap Space ‚ö†Ô∏è Backup your files ‚Äî you may lose data if something goes wrong.\nYou can add swap space to improve memory usage. Here\u0026rsquo;s how:\nCreate a new partition on your flash drive (e.g. 128MB) and set it as a Linux swap partition. Then, edit /etc/config/fstab and add the following section: config swap option device \u0026#39;/dev/sda2\u0026#39; option enabled \u0026#39;1\u0026#39; Reboot the router. Now you have 128MB of swap ‚Äî more than enough for most tasks! X - Setting Up the Serial Interface Setting up a serial interface gives you direct access to the router‚Äôs boot messages and console ‚Äî even if the firmware isn‚Äôt working correctly.\n\u0026lt;|\u0026gt; Why Use Serial? Unbrick your router if something goes wrong during a firmware flash. Debug kernel boot logs and system errors. Access the system when SSH or LuCI isn\u0026rsquo;t available. \u0026lt;|\u0026gt; Identifying the Serial Pins On the TL-MR3020 v1 board, you\u0026rsquo;ll spot a row of unpopulated holes near the edge ‚Äî that\u0026rsquo;s your UART/serial interface: Label Purpose VCC 3.3V (‚ö†Ô∏è Do NOT connect to USB-TTL VCC) TX Transmit RX Receive GND Ground ‚ö†Ô∏è Important: Only connect TX, RX, and GND. Do not connect VCC.\nüí° Tip: You can solder some male header pins in there to make future connections easier ‚Äî or just use jumper cables if you\u0026rsquo;re careful.\n\u0026lt;|\u0026gt; Connecting the Router to a USB-to-TTL Adapter If you don\u0026rsquo;t have an adapter, check the I Have No Adapter section. Connect the adapter to your PC. Wire the adapter to the TL-MR3020 board as follows: USB-TTL Adapter TL-MR3020 Board TX RX RX TX GND GND üîÑ TX goes to RX and RX goes to TX.\n\u0026lt;|\u0026gt; Using a Terminal Program You can use minicom, picocom, or screen to open a serial connection.\nExample with screen:\nscreen /dev/ttyUSB0 115200 üí°I Have No Adapter If you don‚Äôt have a USB-to-Serial adapter ‚Äî no worries! Just make one with what you already have.\nFor me, I had:\nAn Arduino Uno A Raspberry Pi Debug Probe \u0026lt;|\u0026gt; Method 1: Arduino Uno (or similar) Use the onboard USB-to-Serial chip of your Arduino.\nSteps: Connect Arduino via USB to PC\nWire like this:\nArduino Pin TL-MR3020 GND GND TX (D1) RX RX (D0) TX Connect RESET to GND on the Arduino.\nConnecting RESET to GND keeps the Arduino in a permanent reset state, which effectively disables the ATmega chip and allows the USB-to-Serial converter (like the CH340 or ATmega16U2) to communicate directly with the TL-MR3020.\n\u0026lt;|\u0026gt; Method 2: Using the Raspberry Pi Debug Probe If you have the Pi Debug Probe, just use its UART port.\nWire like this: debug Prob TL-MR3020 GND GND TX RX RX TX ‚ö†Ô∏è Make sure your connections use 3.3V logic! The TL-MR3020 is not 5V-tolerant.\n‚úÖ Bonus: The Debug Probe gives great signal stability and has built-in protection.\nNext Steps: Fun Projects You Can Do 1. Local Chat Server Host an IRC server (ngIRCd) on your TL-MR3020 and let friends connect using irssi or weechat. Great for: LAN parties Retro-feeling comms secure chat without needing internet And yep, all running off a tiny router with no internet required. 2. Host a Website (or Dashboard) spin up a tiny local web server using lighttpd or uhttpd host a personal dashboard, files, notes, or even a retro homepage make your own ‚Äúinternet-in-a-box‚Äù for offline use 3. Network Toolbox turn your TL-MR3020 into a Swiss Army knife for networking install tools like tcpdump, nmap, or iperf3 use it to: scan and monitor local networks test speeds and latency between devices debug network issues from anywhere, even without your laptop (you can just ssh from your phone üòâ 4. Just Go Wild You can literally do whatever you want :) It\u0026rsquo;s a Linux box ‚Äî automate stuff, make it blink LEDs, build a weather station, hack together weird networking tools, or just make it do cool nerdy stuff. Your tiny router, your rules.\n","date":"11 June, 2025","id":0,"permalink":"/WhyNot/posts/tl-mr3020-hacking/","summary":"","tags":"TL-MR3020 OpenWrt DIY EmbeddedLinux NetworkTools","title":"TL-MR3020 Hacking"}]